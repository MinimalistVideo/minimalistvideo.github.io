@using OneOf
@using OneOf.Types

@if(!Loaded)
{
    <MudSkeleton SkeletonType="@SkeletonType" Height="@(HeightConverter(Height))" Width="@WidthConverter(Width)"/>
}
else
{
    @ChildContent
}

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool Loaded { get; set; }

    [Parameter]
    public OneOf<Pixel, Percentage, string?, None> Height { get; set; } = "100px";

    [Parameter]
    public OneOf<Pixel, Percentage, string?, None> Width { get; set; } = new None();

    [Parameter]
    public SkeletonType SkeletonType { get; set; } = SkeletonType.Rectangle;

    private static string? HeightConverter(OneOf<Pixel, Percentage, string?, None> height) =>
        height.Match(
            pixel => $"{pixel.Value}px",
            percentage => $"{percentage.Value}%",
            @string => @string,
            none => (string?)null);

    private static string? WidthConverter(OneOf<Pixel, Percentage, string?, None> width) =>
        width.Match(
            pixel => $"{pixel.Value}px",
            percentage => $"{percentage.Value}%",
            @string => @string,
            none => (string?)null);
}